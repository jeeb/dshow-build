Index: src/filters/transform/BaseVideoFilter/BaseVideoFilter.cpp
===================================================================
--- src/filters/transform/BaseVideoFilter/BaseVideoFilter.cpp	(revision 2008)
+++ src/filters/transform/BaseVideoFilter/BaseVideoFilter.cpp	(working copy)
@@ -538,9 +538,7 @@
 	pmt->subtype = *fmts[iPosition/2].subtype;
 
 	int w = m_win, h = m_hin, arx = m_arxin, ary = m_aryin;
-	int RealWidth = -1;
-	int RealHeight = -1;
-	GetOutputSize(w, h, arx, ary, RealWidth, RealHeight);
+	GetOutputSize(w, h, arx, ary);
 
 	BITMAPINFOHEADER bihOut;
 	memset(&bihOut, 0, sizeof(bihOut));
@@ -597,11 +595,6 @@
 		vih->rcSource.bottom = vih->rcTarget.bottom = m_hin;
 	}
 
-	if (RealWidth != -1 && vih->rcSource.right > RealWidth)
-		vih->rcSource.right = RealWidth;
-	if (RealHeight != -1 && vih->rcSource.bottom > RealHeight)
-		vih->rcSource.bottom = RealHeight;
-
 	return S_OK;
 }
 
@@ -615,9 +608,7 @@
 		m_hin = m_h;
 		m_arxin = m_arx;
 		m_aryin = m_ary;
-		int RealWidth;
-		int RealHeight;
-		GetOutputSize(m_w, m_h, m_arx, m_ary, RealWidth, RealHeight);
+		GetOutputSize(m_w, m_h, m_arx, m_ary);
 
 		DWORD a = m_arx, b = m_ary;
 		while(a) {int tmp = a; a = b % tmp; b = tmp;}
Index: src/filters/transform/BaseVideoFilter/BaseVideoFilter.h
===================================================================
--- src/filters/transform/BaseVideoFilter/BaseVideoFilter.h	(revision 2008)
+++ src/filters/transform/BaseVideoFilter/BaseVideoFilter.h	(working copy)
@@ -50,7 +50,7 @@
 	HRESULT CopyBuffer(BYTE* pOut, BYTE* pIn, int w, int h, int pitchIn, const GUID& subtype, bool fInterlaced = false);
 	HRESULT CopyBuffer(BYTE* pOut, BYTE** ppIn, int w, int h, int pitchIn, const GUID& subtype, bool fInterlaced = false);
 
-	virtual void GetOutputSize(int& w, int& h, int& arx, int& ary, int &RealWidth, int &RealHeight) {}
+	virtual void GetOutputSize(int& w, int& h, int& arx, int& ary) {}
 	virtual HRESULT Transform(IMediaSample* pIn) = 0;
 	virtual bool IsVideoInterlaced() {return false;}
 	virtual void GetOutputFormats (int& nNumber, VIDEO_OUTPUT_FORMATS** ppFormats);
